///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2021 - 2022.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef STDEXCEPT_2021_10_22_
  #define STDEXCEPT_2021_10_22_

  #include <string>

  namespace std
  {
    class exception
    {
    public:
      exception() noexcept { }
      explicit exception(const string&) { }
      explicit exception(const char*) { }

      virtual ~exception() { }

      virtual const char* what() const noexcept { static const char pstr[] = "explanatory_string"; return pstr; }
    };

    class logic_error;
    class domain_error;
    class invalid_argument;
    class length_error;
    class out_of_range;
    class runtime_error;
    class range_error;
    class overflow_error;
    class underflow_error;

    class logic_error : public exception
    {
    public:
      explicit logic_error(const string&) { }
      explicit logic_error(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "logic_error"; return pstr; }
    };

    class domain_error : public exception
    {
    public:
      explicit domain_error(const string&) { }
      explicit domain_error(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "domain_error"; return pstr; }
    };

    class invalid_argument : public exception
    {
    public:
      explicit invalid_argument(const string&) { }
      explicit invalid_argument(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "invalid_argument"; return pstr; }
    };

    class length_error : public exception
    {
    public:
      explicit length_error(const string&) { }
      explicit length_error(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "length_error"; return pstr; }
    };

    class out_of_range : public exception
    {
    public:
      explicit out_of_range(const string&) { }
      explicit out_of_range(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "out_of_range"; return pstr; }
    };

    class runtime_error : public exception
    {
    public:
      explicit runtime_error(const string&) { }
      explicit runtime_error(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "runtime_error"; return pstr; }
    };

    class range_error : public exception
    {
    public:
      explicit range_error(const string&) { }
      explicit range_error(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "range_error"; return pstr; }
    };

    class overflow_error : public exception
    {
    public:
      explicit overflow_error(const string&) { }
      explicit overflow_error(const char*) { }

      virtual const char* what() const noexcept { static const char pstr[] = "overflow_error"; return pstr; }
    };
  }

#endif // STDEXCEPT_2021_10_22_
