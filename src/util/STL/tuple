///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2013.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef TUPLE_2010_02_23_
  #define TUPLE_2010_02_23_

  #if defined(__GNUC__)
  #pragma GCC system_header
  #endif

  #include <impl/stl_local_constexpr.h>
  #include <cstddef>
  #include <type_traits>
  #include <utility>

  // Implement some of std::tuple for compilers that do not yet support it.
  // This implementation of tuple supports up to 11 template parameters.
  // Do not use variadic templates because they might not be supported either.

  namespace xtuple_helper
  {
    template<const std::size_t N,
             typename xtuple_type>
    class xget;

    template<typename xtuple_type>
    class xsize;

    struct xnothing final
    {
      xnothing() { }
      xnothing(const xnothing&) { }
      ~xnothing() { }
      xnothing& operator=(const xnothing&) { return *this; }
    };

    inline bool operator==(const xnothing&, const xnothing&) { return true; }
    inline bool operator!=(const xnothing&, const xnothing&) { return false; }
    inline bool operator< (const xnothing&, const xnothing&) { return false; }
    inline bool operator<=(const xnothing&, const xnothing&) { return false; }
    inline bool operator> (const xnothing&, const xnothing&) { return false; }
    inline bool operator>=(const xnothing&, const xnothing&) { return false; }
  }

  namespace std
  {
    // Forward declaration of std::pair.
    template<typename T1,
             typename T2>
    class pair;

    template<typename T0  = xtuple_helper::xnothing,
             typename T1  = xtuple_helper::xnothing,
             typename T2  = xtuple_helper::xnothing,
             typename T3  = xtuple_helper::xnothing,
             typename T4  = xtuple_helper::xnothing,
             typename T5  = xtuple_helper::xnothing,
             typename T6  = xtuple_helper::xnothing,
             typename T7  = xtuple_helper::xnothing,
             typename T8  = xtuple_helper::xnothing,
             typename T9  = xtuple_helper::xnothing,
             typename T10 = xtuple_helper::xnothing,
             typename T11 = xtuple_helper::xnothing>
    class tuple
    {
    public:
      template<const std::size_t N,
               typename xtuple_type>
      friend class xtuple_helper::xget;

      template<typename xtuple_type>
      friend class xtuple_helper::xsize;

      typedef tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> tuple_type;

      tuple() { }

      explicit tuple(const T0&  p0,
                     const T1&  p1  = T1 (),
                     const T2&  p2  = T2 (),
                     const T3&  p3  = T3 (),
                     const T4&  p4  = T4 (),
                     const T5&  p5  = T5 (),
                     const T6&  p6  = T6 (),
                     const T7&  p7  = T7 (),
                     const T8&  p8  = T8 (),
                     const T9&  p9  = T9 (),
                     const T10& p10 = T10(),
                     const T11& p11 = T11()) : t0 (p0),
                                               t1 (p1),
                                               t2 (p2),
                                               t3 (p3),
                                               t4 (p4),
                                               t5 (p5),
                                               t6 (p6),
                                               t7 (p7),
                                               t8 (p8),
                                               t9 (p9),
                                               t10(p10),
                                               t11(p11){ }

      tuple(const tuple_type& t) : t0 (t.t0),
                                   t1 (t.t1),
                                   t2 (t.t2),
                                   t3 (t.t3),
                                   t4 (t.t4),
                                   t5 (t.t5),
                                   t6 (t.t6),
                                   t7 (t.t7),
                                   t8 (t.t8),
                                   t9 (t.t9),
                                   t10(t.t10),
                                   t11(t.t11){ }

      template<typename U0,
               typename U1>
      tuple(const std::pair<U0, U1>& p) : t0 (p.first),
                                          t1 (p.second),
                                          t2 (T2 ()),
                                          t3 (T3 ()),
                                          t4 (T4 ()),
                                          t5 (T5 ()),
                                          t6 (T6 ()),
                                          t7 (T7 ()),
                                          t8 (T8 ()),
                                          t9 (T9 ()),
                                          t10(T10()),
                                          t11(T11()){ }

      ~tuple() { }

      template<typename U0,
               typename U1,
               typename U2,
               typename U3,
               typename U4,
               typename U5,
               typename U6,
               typename U7,
               typename U8,
               typename U9,
               typename U10,
               typename U11>
      tuple& operator=(const tuple<U0, U1, U2, U3, U4, U5, U6, U7, U8, U9, U10, U11>& t)
      {
        t0  = T0 (t.t0);
        t1  = T1 (t.t1);
        t2  = T2 (t.t2);
        t3  = T3 (t.t3);
        t4  = T4 (t.t4);
        t5  = T5 (t.t5);
        t6  = T6 (t.t6);
        t7  = T7 (t.t7);
        t8  = T8 (t.t8);
        t9  = T9 (t.t9);
        t10 = T10(t.t10);
        t11 = T11(t.t11);

        return *this;
      }

      template<typename U0,
               typename U1>
      tuple& operator=(const std::pair<U0, U1>& p)
      {
        t0  = T0 (p.first);
        t1  = T1 (p.second);
        t2  = T2 ();
        t3  = T3 ();
        t4  = T4 ();
        t5  = T5 ();
        t6  = T6 ();
        t7  = T7 ();
        t8  = T8 ();
        t9  = T9 ();
        t10 = T10();
        t11 = T11();

        return *this;
      }

      void swap(tuple& other)
      {
        if(this != &other)
        {
          const type0  tmp0 (t0 ); t0  = other.t0 ; other.t0  = tmp0 ;
          const type1  tmp1 (t1 ); t1  = other.t1 ; other.t1  = tmp1 ;
          const type2  tmp2 (t2 ); t2  = other.t2 ; other.t2  = tmp2 ;
          const type3  tmp3 (t3 ); t3  = other.t3 ; other.t3  = tmp3 ;
          const type4  tmp4 (t4 ); t4  = other.t4 ; other.t4  = tmp4 ;
          const type5  tmp5 (t5 ); t5  = other.t5 ; other.t5  = tmp5 ;
          const type6  tmp6 (t6 ); t6  = other.t6 ; other.t6  = tmp6 ;
          const type7  tmp7 (t7 ); t7  = other.t7 ; other.t7  = tmp7 ;
          const type8  tmp8 (t8 ); t8  = other.t8 ; other.t8  = tmp8 ;
          const type9  tmp9 (t9 ); t9  = other.t9 ; other.t9  = tmp9 ;
          const type10 tmp10(t10); t10 = other.t10; other.t10 = tmp10;
          const type11 tmp11(t11); t11 = other.t11; other.t11 = tmp11;
        }
      }

    private:
      T0  t0;
      T1  t1;
      T2  t2;
      T3  t3;
      T4  t4;
      T5  t5;
      T6  t6;
      T7  t7;
      T8  t8;
      T9  t9;
      T10 t10;
      T11 t11;

      typedef T0  type0;
      typedef T1  type1;
      typedef T2  type2;
      typedef T3  type3;
      typedef T4  type4;
      typedef T5  type5;
      typedef T6  type6;
      typedef T7  type7;
      typedef T8  type8;
      typedef T9  type9;
      typedef T10 type10;
      typedef T11 type11;
    };
  }

  namespace xtuple_helper
  {
    template<const std::size_t N, typename xtuple_type>
    class xget { };

    #define MAKE_XTUPLE_GET_HELPER(NUM)                                              \
    template<typename xtuple_type> class xget<(NUM), xtuple_type>                    \
    {                                                                                \
    public:                                                                          \
      typedef typename xtuple_type::type##NUM xelem_type;                            \
      static       xelem_type& get      (      xtuple_type& t) { return t.t##NUM ; } \
      static const xelem_type& get_const(const xtuple_type& t) { return t.t##NUM ; } \
    }                                                                                \

    MAKE_XTUPLE_GET_HELPER(0);
    MAKE_XTUPLE_GET_HELPER(1);
    MAKE_XTUPLE_GET_HELPER(2);
    MAKE_XTUPLE_GET_HELPER(3);
    MAKE_XTUPLE_GET_HELPER(4);
    MAKE_XTUPLE_GET_HELPER(5);
    MAKE_XTUPLE_GET_HELPER(6);
    MAKE_XTUPLE_GET_HELPER(7);
    MAKE_XTUPLE_GET_HELPER(8);
    MAKE_XTUPLE_GET_HELPER(9);
    MAKE_XTUPLE_GET_HELPER(10);
    MAKE_XTUPLE_GET_HELPER(11);

    template<typename T> class xtuple_elem_size_helper                          { public: static STL_LOCAL_CONSTEXPR std::size_t value = 1U; };
    template<>           class xtuple_elem_size_helper<xtuple_helper::xnothing> { public: static STL_LOCAL_CONSTEXPR std::size_t value = 0U; };

    template<typename xtuple_type>
    class xsize
    {
    public:
      static STL_LOCAL_CONSTEXPR std::size_t value =   xtuple_elem_size_helper<typename xtuple_type::type0>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type1>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type2>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type3>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type4>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type5>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type6>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type7>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type8>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type9>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type10>::value
                                                     + xtuple_elem_size_helper<typename xtuple_type::type11>::value;
    };
  }

  namespace std
  {
    template<const std::size_t N>
    typename xtuple_helper::xget<N, tuple<> >::xelem_type& get(tuple<>& t) { return xtuple_helper::xget<N, tuple<> >::get(t); }
    template<const std::size_t N, typename T0>
    typename xtuple_helper::xget<N, tuple<T0> >::xelem_type& get(tuple<T0>& t) { return xtuple_helper::xget<N, tuple<T0> >::get(t); }
    template<const std::size_t N, typename T0, typename T1>
    typename xtuple_helper::xget<N, tuple<T0, T1> >::xelem_type& get(tuple<T0, T1>& t) { return xtuple_helper::xget<N, tuple<T0, T1> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2> >::xelem_type& get(tuple<T0, T1, T2>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3> >::xelem_type& get(tuple<T0, T1, T2, T3>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4> >::xelem_type& get(tuple<T0, T1, T2, T3, T4>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5> >::xelem_type& get(tuple<T0, T1, T2, T3, T4, T5>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6> >::xelem_type& get(tuple<T0, T1, T2, T3, T4, T5, T6>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7> >::xelem_type& get(tuple<T0, T1, T2, T3, T4, T5, T6, T7>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> >::xelem_type& get(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> >::xelem_type& get(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >::xelem_type& get(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >::get(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
    typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> >::xelem_type& get(tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> >::get(t); }

    template<const std::size_t N>
    const typename xtuple_helper::xget<N, tuple<> >::xelem_type& get(const tuple<>& t) { return xtuple_helper::xget<N, tuple<> >::get_const(t); }
    template<const std::size_t N, typename T0>
    const typename xtuple_helper::xget<N, tuple<T0> >::xelem_type& get(const tuple<T0>& t) { return xtuple_helper::xget<N, tuple<T0> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1>
    const typename xtuple_helper::xget<N, tuple<T0, T1> >::xelem_type& get(const tuple<T0, T1>& t) { return xtuple_helper::xget<N, tuple<T0, T1> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2> >::xelem_type& get(const tuple<T0, T1, T2>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3> >::xelem_type& get(const tuple<T0, T1, T2, T3>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4, T5>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4, T5, T6>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4, T5, T6, T7>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >::get_const(t); }
    template<const std::size_t N, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
    const typename xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >::xelem_type& get(const tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>& t) { return xtuple_helper::xget<N, tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> >::get_const(t); }

    template<const std::size_t N,
             typename tuple_type>
    class tuple_element
    {
    public:
      typedef typename xtuple_helper::xget<N, tuple_type>::xelem_type type;
    };

    template<const std::size_t N,
             typename tuple_type>
    class tuple_element<N, const tuple_type>
    {
    public:
      typedef typename std::add_const<typename std::tuple_element<N, tuple_type>::type>::type type;
    };

    template<const std::size_t N,
             typename tuple_type>
    class tuple_element<N, volatile tuple_type>
    {
    public:
      typedef typename std::add_volatile<typename std::tuple_element<N, tuple_type>::type>::type type;
    };

    template<const std::size_t N,
             typename tuple_type>
    class tuple_element<N, const volatile tuple_type>
    {
    public:
      typedef typename std::add_cv<typename std::tuple_element<N, tuple_type>::type>::type type;
    };

    template<typename tuple_type>
    class tuple_size
    {
    public:
      static STL_LOCAL_CONSTEXPR std::size_t value = xtuple_helper::xsize<tuple_type>::value;
    };

    template<typename tuple_type>
    class tuple_size<const tuple_type> : public std::integral_constant<std::size_t, tuple_size<tuple_type>::value> { };

    template<typename tuple_type>
    class tuple_size<volatile tuple_type> : public std::integral_constant<std::size_t, tuple_size<tuple_type>::value> { };

    template<typename tuple_type>
    class tuple_size<const volatile tuple_type> : public std::integral_constant<std::size_t, tuple_size<tuple_type>::value> { };

    template<typename T0>
    tuple<T0> make_tuple(const T0&  p0  = T0 ())
    { return tuple<T0>(p0); }

    template<typename T0,
             typename T1>
    tuple<T0, T1> make_tuple(const T0&  p0  = T0 (),
                             const T1&  p1  = T1 ())
    { return tuple<T0, T1>(p0, p1); }

    template<typename T0,
             typename T1,
             typename T2>
    tuple<T0, T1, T2> make_tuple(const T0&  p0  = T0 (),
                                 const T1&  p1  = T1 (),
                                 const T2&  p2  = T2 ())
    { return tuple<T0, T1, T2>(p0, p1, p2); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3>
    tuple<T0, T1, T2, T3> make_tuple(const T0&  p0  = T0 (),
                                     const T1&  p1  = T1 (),
                                     const T2&  p2  = T2 (),
                                     const T3&  p3  = T3 ())
    { return tuple<T0, T1, T2, T3>(p0, p1, p2, p3); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4>
    tuple<T0, T1, T2, T3, T4> make_tuple(const T0&  p0  = T0 (),
                                         const T1&  p1  = T1 (),
                                         const T2&  p2  = T2 (),
                                         const T3&  p3  = T3 (),
                                         const T4&  p4  = T4 ())
    { return tuple<T0, T1, T2, T3, T4>(p0, p1, p2, p3, p4); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4,
             typename T5>
    tuple<T0, T1, T2, T3, T4, T5> make_tuple(const T0&  p0  = T0 (),
                                             const T1&  p1  = T1 (),
                                             const T2&  p2  = T2 (),
                                             const T3&  p3  = T3 (),
                                             const T4&  p4  = T4 (),
                                             const T5&  p5  = T5 ())
    { return tuple<T0, T1, T2, T3, T4, T5>(p0, p1, p2, p3, p4, p5); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4,
             typename T5,
             typename T6>
    tuple<T0, T1, T2, T3, T4, T5, T6> make_tuple(const T0&  p0  = T0 (),
                                                 const T1&  p1  = T1 (),
                                                 const T2&  p2  = T2 (),
                                                 const T3&  p3  = T3 (),
                                                 const T4&  p4  = T4 (),
                                                 const T5&  p5  = T5 (),
                                                 const T6&  p6  = T6 ())
    { return tuple<T0, T1, T2, T3, T4, T5, T6>(p0, p1, p2, p3, p4, p5, p6); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4,
             typename T5,
             typename T6,
             typename T7>
    tuple<T0, T1, T2, T3, T4, T5, T6, T7> make_tuple(const T0&  p0  = T0 (),
                                                     const T1&  p1  = T1 (),
                                                     const T2&  p2  = T2 (),
                                                     const T3&  p3  = T3 (),
                                                     const T4&  p4  = T4 (),
                                                     const T5&  p5  = T5 (),
                                                     const T6&  p6  = T6 (),
                                                     const T7&  p7  = T7 ())
    { return tuple<T0, T1, T2, T3, T4, T5, T6, T7>(p0, p1, p2, p3, p4, p5, p6, p7); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4,
             typename T5,
             typename T6,
             typename T7,
             typename T8>
    tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> make_tuple(const T0&  p0  = T0 (),
                                                         const T1&  p1  = T1 (),
                                                         const T2&  p2  = T2 (),
                                                         const T3&  p3  = T3 (),
                                                         const T4&  p4  = T4 (),
                                                         const T5&  p5  = T5 (),
                                                         const T6&  p6  = T6 (),
                                                         const T7&  p7  = T7 (),
                                                         const T8&  p8  = T8 ())
    { return tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>(p0, p1, p2, p3, p4, p5, p6, p7, p8); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4,
             typename T5,
             typename T6,
             typename T7,
             typename T8,
             typename T9>
    tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> make_tuple(const T0&  p0  = T0 (),
                                                             const T1&  p1  = T1 (),
                                                             const T2&  p2  = T2 (),
                                                             const T3&  p3  = T3 (),
                                                             const T4&  p4  = T4 (),
                                                             const T5&  p5  = T5 (),
                                                             const T6&  p6  = T6 (),
                                                             const T7&  p7  = T7 (),
                                                             const T8&  p8  = T8 (),
                                                             const T9&  p9  = T9 ())
    { return tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4,
             typename T5,
             typename T6,
             typename T7,
             typename T8,
             typename T9,
             typename T10>
    tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> make_tuple(const T0&  p0  = T0 (),
                                                                  const T1&  p1  = T1 (),
                                                                  const T2&  p2  = T2 (),
                                                                  const T3&  p3  = T3 (),
                                                                  const T4&  p4  = T4 (),
                                                                  const T5&  p5  = T5 (),
                                                                  const T6&  p6  = T6 (),
                                                                  const T7&  p7  = T7 (),
                                                                  const T8&  p8  = T8 (),
                                                                  const T9&  p9  = T9 (),
                                                                  const T10& p10 = T10())
    { return tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }

    template<typename T0,
             typename T1,
             typename T2,
             typename T3,
             typename T4,
             typename T5,
             typename T6,
             typename T7,
             typename T8,
             typename T9,
             typename T10,
             typename T11>
    tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> make_tuple(const T0&  p0  = T0 (),
                                                                       const T1&  p1  = T1 (),
                                                                       const T2&  p2  = T2 (),
                                                                       const T3&  p3  = T3 (),
                                                                       const T4&  p4  = T4 (),
                                                                       const T5&  p5  = T5 (),
                                                                       const T6&  p6  = T6 (),
                                                                       const T7&  p7  = T7 (),
                                                                       const T8&  p8  = T8 (),
                                                                       const T9&  p9  = T9 (),
                                                                       const T10& p10 = T10(),
                                                                       const T11& p11 = T11())
    { return tuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
  }

#endif // TUPLE_2010_02_23_
