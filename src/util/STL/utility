///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2023.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef UTILITY_2010_02_23_
  #define UTILITY_2010_02_23_

  #include <cstddef>
  #include <tuple>
  #include <type_traits>

  // Implement some of <utility> for compilers that do not yet support it.

  namespace std
  {
    // Forward declaration of std::identity, which is implemented in <functional>.
    template<typename T>
    struct identity;

    template<typename T>
    constexpr T&& forward(remove_reference_t<T>& arg) STL_LOCAL_NOEXCEPT
    {
      return static_cast<T&&>(arg);
    }

    template<typename T>
    constexpr T&& forward(remove_reference_t<T>&& arg) STL_LOCAL_NOEXCEPT
    {
      return static_cast<T&&>(arg);
    }
  }

  namespace std
  {
    template<typename T1,
             typename T2>
    class pair
    {
    public:
      typedef T1 first_type;
      typedef T2 second_type;

      first_type  first;
      second_type second;

      pair() : first(T1()), second(T2()) { }

      pair(const first_type& t1, const second_type& t2) : first (t1),
                                                          second(t2) { }

      pair(const pair& other) : first (other.first),
                                second(other.second) { }

      pair(pair&& other) noexcept : first (other.first),
                                    second(other.second) { }

      template<typename other_type1,
               typename other_type2>
      pair(const pair<other_type1, other_type2>& p) : first (T1(p.first)),
                                                      second(T2(p.second)) { }

      pair& operator=(const pair& other)
      {
        if(*this != &other)
        {
          first  = other.first;
          second = other.second;
        }

        return *this;
      }

      pair& operator=(pair&& other) noexcept
      {
        first  = other.first;
        second = other.second;

        return *this;
      }
    };
  }

  namespace xpair_helper
  {
    template<int I, typename T>
    class xget { };

    template<typename T1, typename T2>
    class xget<0, std::pair<T1, T2> >
    {
    public:
      typedef       T1& nonconstant_reference_type;
      typedef const T1&    constant_reference_type;

      static nonconstant_reference_type my_value(      std::pair<T1, T2>& my_pair) { return my_pair.first; }
      static    constant_reference_type my_value(const std::pair<T1, T2>& my_pair) { return my_pair.first; }
    };

    template<typename T1, typename T2>
    class xget<1, std::pair<T1, T2> >
    {
    public:
      typedef       T2& nonconstant_reference_type;
      typedef const T2&    constant_reference_type;

      static nonconstant_reference_type my_value(      std::pair<T1, T2>& my_pair) { return my_pair.second; }
      static    constant_reference_type my_value(const std::pair<T1, T2>& my_pair) { return my_pair.second; }
    };
  }

  namespace std
  {
    template<int I, typename T1, typename T2>
    typename xpair_helper::xget<I, std::pair<T1, T2> >::nonconstant_reference_type
    get(std::pair<T1, T2>& my_pair)
    {
      return (xpair_helper::xget<I, std::pair<T1, T2> >::my_value(my_pair));
    }

    template<int I, typename T1, typename T2>
    typename xpair_helper::xget<I, std::pair<T1, T2> >::constant_reference_type
    get(const std::pair<T1, T2>& my_pair)
    {
      return (xpair_helper::xget<I, std::pair<T1, T2> >::my_value(my_pair));
    }

    template<typename tuple_type>
    class tuple_size;

    template<std::size_t I, typename T>
    class tuple_element;

    template<typename T1, typename T2>
    class tuple_element<0U, std::pair<T1, T2> >
    {
    public:
      typedef T1 type;
    };

    template<typename T1, typename T2>
    class tuple_element<1U, std::pair<T1, T2> >
    {
    public:
      typedef T2 type;
    };

    template<typename T1, typename T2>
    class tuple_size<std::pair<T1, T2> >
    {
    public:
      static const std::size_t value = 2;
    };

    template<typename T1, typename T2>
    void swap(std::pair<T1, T2>& left, std::pair<T1, T2>& right)
    {
      const std::pair<T1, T2> tmp(left);
      left  = right;
      right = tmp;
    }

    template<typename T1, typename T2>
    bool operator==(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
    {
      return ((left.first == right.first) && (left.second == right.second));
    }

    template<typename T1, typename T2>
    bool operator!=(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
    {
      return ((left.first != right.first) || (left.second != right.second));
    }

    template<typename T1, typename T2>
    bool operator<(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
    {
      return ((left.first < right.first)
               ? true
               : ((right.first < left.first)
                   ? false
                   : ((left.second < right.second) ? true : false)));
    }

    template<typename T1, typename T2>
    bool operator>(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
    {
      return (right < left);
    }

    template<typename T1, typename T2>
    bool operator<=(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
    {
      return ((right < left) == false);
    }

    template<typename T1, typename T2>
    bool operator>=(const std::pair<T1, T2>& left, const std::pair<T1, T2>& right)
    {
      return ((left < right) == false);
    }

    template<typename T1, typename T2>
    std::pair<T1, T2> make_pair(T1 value1, T2 value2)
    {
      return std::pair<T1, T2>(value1, value2);
    }
  }

  namespace std
  {
    template <typename T, T... N>
    struct integer_sequence;
  }

  namespace xinteger_sequence_helper
  {
    template <typename T, std::size_t ..._Extra>
    struct repeat;

    template <typename T, T ...N, std::size_t ..._Extra>
    struct repeat<std::integer_sequence<T, N...>, _Extra...>
    {
      typedef std::integer_sequence<T, N...,
                                    1 * sizeof...(N) + N...,
                                    2 * sizeof...(N) + N...,
                                    3 * sizeof...(N) + N...,
                                    4 * sizeof...(N) + N...,
                                    5 * sizeof...(N) + N...,
                                    6 * sizeof...(N) + N...,
                                    7 * sizeof...(N) + N...,
                                    _Extra...> type;
    };

    template <std::size_t N> struct parity;
    template <std::size_t N> struct make:parity<N % 8>::template pmake<N> { };

    template <> struct make<0> { typedef std::integer_sequence<std::size_t> type; };
    template <> struct make<1> { typedef std::integer_sequence<std::size_t, 0> type; };
    template <> struct make<2> { typedef std::integer_sequence<std::size_t, 0, 1> type; };
    template <> struct make<3> { typedef std::integer_sequence<std::size_t, 0, 1, 2> type; };
    template <> struct make<4> { typedef std::integer_sequence<std::size_t, 0, 1, 2, 3> type; };
    template <> struct make<5> { typedef std::integer_sequence<std::size_t, 0, 1, 2, 3, 4> type; };
    template <> struct make<6> { typedef std::integer_sequence<std::size_t, 0, 1, 2, 3, 4, 5> type; };
    template <> struct make<7> { typedef std::integer_sequence<std::size_t, 0, 1, 2, 3, 4, 5, 6> type; };

    template <> struct parity<0> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type> {}; };
    template <> struct parity<1> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type, N - 1> {}; };
    template <> struct parity<2> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type, N - 2, N - 1> {}; };
    template <> struct parity<3> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type, N - 3, N - 2, N - 1> {}; };
    template <> struct parity<4> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type, N - 4, N - 3, N - 2, N - 1> {}; };
    template <> struct parity<5> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type, N - 5, N - 4, N - 3, N - 2, N - 1> {}; };
    template <> struct parity<6> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type, N - 6, N - 5, N - 4, N - 3, N - 2, N - 1> {}; };
    template <> struct parity<7> { template <std::size_t N> struct pmake:repeat<typename make<N / 8>::type, N - 7, N - 6, N - 5, N - 4, N - 3, N - 2, N - 1> {}; };

    template <typename T, typename U>
    struct convert
    {
      template <typename>
      struct result;

      template <T ...N>
      struct result<std::integer_sequence<T, N...> >
      {
        typedef std::integer_sequence<U, N...> type;
      };
    };

    template <typename T>
    struct convert<T, T>
    {
      template <typename U>
      struct result
      {
        typedef U type;
      };
    };

    template <typename T, T N>
    using make_integer_sequence_unchecked =
    typename convert<std::size_t, T>::template result<typename make<N>::type>::type;

    template <typename T, T N>
    struct make_integer_sequence
    {
      static_assert(std::is_integral<T>::value,
        "std::make_integer_sequence can only be instantiated with an integral type");
      static_assert(0 <= N,"std::make_integer_sequence input shall not be negative");

      typedef make_integer_sequence_unchecked<T, N> type;
    };
  } // namespace xinteger_sequence_helper

  namespace std
  {
    template <typename T, T... N>
    struct integer_sequence
    {
      typedef T value_type;
      static_assert(
        std::is_integral<T>::value,
        "std::integer_sequence can only be instantiated with an integral type" );

      static std::size_t size()
      {
        return (sizeof...(N));
      }
    };

    template <std::size_t... N>
    using index_sequence = integer_sequence<std::size_t, N...>;

    template <typename T, T N>
    using make_integer_sequence = typename xinteger_sequence_helper::make_integer_sequence<T, N>::type;

    template <std::size_t N>
    using make_index_sequence = make_integer_sequence<std::size_t, N>;

    template <typename... T>
    using index_sequence_for = make_index_sequence<sizeof...(T)>;
  }

#endif // UTILITY_2010_02_23_
