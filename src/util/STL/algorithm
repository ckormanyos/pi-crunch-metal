///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2018.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef ALGORITHM_2010_02_23_
  #define ALGORITHM_2010_02_23_

  #include <cstddef>
  #include <initializer_list>
  #include <iterator>
  #include <utility>

  // Implement some of <algorithm> for compilers that do not yet support it.
  // See ISO/IEC 14882:2011 Chapter 25.1.

  namespace std
  {
    // Forward declaration.
    template<typename input_iterator1,
             typename input_iterator2>
    void iter_swap(input_iterator1 left,
                   input_iterator2 right);

    template<typename value_type>
    const value_type& (min)(const value_type& a,
                            const value_type& b)
    {
      return ((a < b) ? a : b);
    }

    template<typename value_type,
             typename binary_function_type>
    const value_type& (min)(const value_type&    a,
                            const value_type&    b,
                            binary_function_type binary_function)
    {
      return (binary_function(b, a) ? b : a);
    }

    template<typename forward_iterator>
    forward_iterator min_element(forward_iterator first,
                                 forward_iterator last)
    {
      forward_iterator minimum_value = first;

      if(first != last)
      {
        ++first;

        for( ; first != last; ++first)
        {
          if((*first) < (*minimum_value))
          {
            minimum_value = first;
          }
        }
      }

      return minimum_value;
    }

    template<typename forward_iterator,
             typename binary_function_type>
    forward_iterator min_element(forward_iterator     first,
                                 forward_iterator     last,
                                 binary_function_type binary_function)
    {
      forward_iterator minimum_value = first;

      if(first != last)
      {
        ++first;

        for( ; first != last; ++first)
        {
          if(binary_function(*first, *minimum_value))
          {
            minimum_value = first;
          }
        }
      }

      return minimum_value;
    }

    template<typename value_type>
    value_type (min)(std::initializer_list<value_type> my_initializer_list)
    {
      return *std::min_element(my_initializer_list.begin(), my_initializer_list.end());
    }

    template<typename value_type,
             typename binary_function_type>
    value_type (min)(std::initializer_list<value_type> my_initializer_list,
                     binary_function_type binary_function)
    {
      return *std::min_element(my_initializer_list.begin(),
                               my_initializer_list.end(),
                               binary_function);
    }

    template<typename value_type>
    const value_type& (max)(const value_type& a,
                            const value_type& b)
    {
      return ((a > b) ? a : b);
    }

    template<typename value_type,
             typename binary_function_type>
    const value_type& (max)(const value_type&    a,
                            const value_type&    b,
                            binary_function_type binary_function)
    {
      return (binary_function(a, b) ? a : b);
    }

    template<typename forward_iterator>
    forward_iterator max_element(forward_iterator first, forward_iterator last)
    {
      forward_iterator maximum_value = first;

      if(first != last)
      {
        ++first;

        for( ; first != last; ++first)
        {
          if((*first) > (*maximum_value))
          {
            maximum_value = first;
          }
        }
      }

      return maximum_value;
    }

    template<typename forward_iterator,
             typename binary_function_type>
    forward_iterator max_element(forward_iterator     first,
                                 forward_iterator     last,
                                 binary_function_type binary_function)
    {
      forward_iterator maximum_value = first;

      if(first != last)
      {
        ++first;

        for( ; first != last; ++first)
        {
          if(binary_function(*maximum_value, *first))
          {
            maximum_value = first;
          }
        }
      }

      return maximum_value;
    }

    template<typename value_type>
    value_type (max)(std::initializer_list<value_type> my_initializer_list)
    {
      return *std::max_element(my_initializer_list.begin(), my_initializer_list.end());
    }

    template<typename value_type,
             typename binary_function_type>
    value_type (max)(std::initializer_list<value_type> my_initializer_list,
                     binary_function_type binary_function)
    {
      return *std::max_element(my_initializer_list.begin(),
                               my_initializer_list.end(),
                               binary_function);
    }

    template<typename value_type>
    std::pair<const value_type&,
              const value_type&> (minmax)(const value_type& a,
                                          const value_type& b)
    {
      return ((b < a) ? std::pair<const value_type&, const value_type&>(b, a)
                      : std::pair<const value_type&, const value_type&>(a, b));
    }

    template<typename value_type,
             typename binary_function_type>
    std::pair<const value_type&,
              const value_type&> (minmax)(const value_type&    a,
                                          const value_type&    b,
                                          binary_function_type binary_function)
    {
      return (binary_function(b, a) ? std::pair<const value_type&, const value_type&>(b, a)
                                    : std::pair<const value_type&, const value_type&>(a, b));
    }

    template <typename input_iterator1,
              typename input_iterator2>
    bool lexicographical_compare(input_iterator1 first1,
                                 input_iterator1 last1,
                                 input_iterator2 first2,
                                 input_iterator2 last2)
    {
      while(first1 != last1)
      {
        if((first2 == last2) || (*first2 < *first1))
        {
          return false;
        }
        else if(*first1 < *first2)
        {
          return true;
        }

        ++first1;
        ++first2;
      }

      return (first2 != last2);
    }

    template<typename input_iterator,
             typename output_iterator>
    output_iterator copy(input_iterator  first,
                         input_iterator  last,
                         output_iterator result)
    {
      for( ; first != last; ++result, ++first)
      {
        *result = *first;
      }

      return result;
    }

    template<typename bidirectional_input__iterator1,
             typename bidirectional_output_iterator2>
    bidirectional_output_iterator2 copy_backward(bidirectional_input__iterator1 first1,
                                                 bidirectional_input__iterator1 last1,
                                                 bidirectional_output_iterator2 last2)
    {
      while (first1 != last1)
      {
        --last1;
        --last2;

        *last2 = *last1;
      }

      return last2;
    }

    template<typename input_iterator,
             typename output_iterator,
             typename unary_function_type>
    output_iterator copy_if(input_iterator      first,
                            input_iterator      last,
                            output_iterator     result,
                            unary_function_type unary_function)
    {
      while(first != last)
      {
        if(unary_function(*first))
        {
          *result = *first;

          ++result;
        }

        ++first;
      }

      return result;
    }

    template<typename forward_iterator,
             typename value_type>
    void fill(forward_iterator  first,
              forward_iterator  last,
              const value_type& value)
    {
      for( ; first != last; ++first)
      {
        *first = value;
      }
    }

    template<typename output_iterator,
             typename size_type,
             typename value_type>
    output_iterator fill_n(output_iterator   first,
                           size_type         count,
                           const value_type& value)
    {
      const output_iterator last(first + count);

      fill(first, last, value);

      return last;
    }

    template<typename forward_iterator,
             typename generator_type>
    void generate(forward_iterator first,
                  forward_iterator last,
                  generator_type   generator)
    {
      while(first != last)
      {
        *first = generator();

        ++first;
      }
    }

    template<typename output_iterator,
             typename size_type,
             typename generator_type>
    output_iterator generate_n(output_iterator first,
                               size_type       count,
                               generator_type  generator)
    {
      for(size_type i = size_type(0); i < count; ++i)
      {
        *first = generator();

        ++first;
      }

      return first;
    }

    template<typename bidirectional_iterator>
    void reverse(bidirectional_iterator first, bidirectional_iterator last)
    {
      while((first != last) && (first != --last))
      {
        std::iter_swap(first++, last);
      }
    }

    template<typename input_iterator,
             typename output_iterator,
             typename unary_function_type>
    output_iterator transform(input_iterator      first,
                              input_iterator      last,
                              output_iterator     result,
                              unary_function_type unary_function)
    {
      for( ; first != last; ++first, ++result)
      {
        *result = unary_function(*first);
      }

      return result;
    }

    template<typename input_iterator1,
             typename input_iterator2,
             typename output_iterator,
             typename binary_function_type>
    output_iterator transform(input_iterator1      first1,
                              input_iterator1      last1,
                              input_iterator2      first2,
                              output_iterator      result,
                              binary_function_type binary_function)
    {
      for( ; first1 != last1; ++first1, ++first2, ++result)
      {
        *result = binary_function(*first1, *first2);
      }

      return result;
    }

    template<typename input_iterator1,
             typename input_iterator2>
    bool equal(input_iterator1 first1,
               input_iterator1 last1,
               input_iterator2 first2)
    {
      while(first1 != last1)
      {
        if((*first1) != (*first2))
        {
          break;
        }

        ++first1;
        ++first2;
      }

      return (first1 == last1);
    }

    template<typename input_iterator1,
             typename input_iterator2,
             typename binary_function_type>
    bool equal(input_iterator1      first1,
               input_iterator1      last1,
               input_iterator2      first2,
               binary_function_type binary_function)
    {
      while(first1 != last1)
      {
        if(binary_function(*first1, *first2) == false)
        {
          break;
        }

        ++first1;
        ++first2;
      }

      return (first1 == last1);
    }

    template<typename iterator_type,
             typename unary_function_type>
    bool all_of(iterator_type       first,
                iterator_type       last,
                unary_function_type unary_function)
    {
      while((first != last) && unary_function(*first))
      {
        ++first;
      }

      return (first == last);
    }

    template<typename iterator_type,
             typename unary_function_type>
    bool any_of(iterator_type       first,
                iterator_type       last,
                unary_function_type unary_function)
    {
      while((first != last) && (unary_function(*first) == false))
      {
        ++first;
      }

      return (first != last);
    }

    template<typename iterator_type,
             typename unary_function_type>
    bool none_of(iterator_type       first,
                 iterator_type       last,
                 unary_function_type unary_function)
    {
      while((first != last) && (unary_function(*first) == false))
      {
        ++first;
      }

      return (first == last);
    }

    template<typename iterator_type,
             typename unary_function_type>
    unary_function_type for_each(iterator_type       first,
                                 iterator_type       last,
                                 unary_function_type unary_function)
    {
      for( ; first != last; ++first)
      {
        unary_function(*first);
      }

      return unary_function;
    }

    template<typename iterator_type,
             typename size_type,
             typename unary_function_type>
    iterator_type for_each_n(iterator_type       first,
                             size_type           count,
                             unary_function_type unary_function)
    {
      for(size_type i = 0; i < count; ++i)
      {
        unary_function(*first);

        ++first;
      }

      return first;
    }

    template<typename input_iterator,
             typename unary_function_type>
    input_iterator find_if(input_iterator      first,
                           input_iterator      last,
                           unary_function_type unary_function)
    {
      while((first != last) && (!unary_function(*first)))
      {
        ++first;
      }

      return first;
    }

    template<typename input_iterator,
             typename unary_function_type>
    input_iterator find_if_not(input_iterator      first,
                               input_iterator      last,
                               unary_function_type unary_function)
    {
      while((first != last) && unary_function(*first))
      {
        ++first;
      }

      return first;
    }

    template<typename input_iterator,
             typename value_type>
    typename std::iterator_traits<input_iterator>::difference_type
      count(input_iterator    first,
            input_iterator    last,
            const value_type& value)
    {
      typedef typename std::iterator_traits<input_iterator>::difference_type count_type;

      count_type count_value(0);

      while(first != last)
      {
        if(value == *first)
        {
          ++count_value;
        }

        ++first;
      }

      return count_value;
    }

    template<class InputIt1, class InputIt2>
    std::pair<InputIt1, InputIt2> mismatch(InputIt1 first1, InputIt1 last1, InputIt2 first2)
    {
      while(first1 != last1 && *first1 == *first2)
      {
          ++first1, ++first2;
      }

      return std::make_pair(first1, first2);
    }

    template<typename input_iterator,
             typename unary_function_type>
    typename std::iterator_traits<input_iterator>::difference_type
      count_if(input_iterator      first,
               input_iterator      last,
               unary_function_type unary_function)
    {
      typedef typename std::iterator_traits<input_iterator>::difference_type count_type;

      count_type count_value(0);

      while(first != last)
      {
        if(unary_function(*first))
        {
          ++count_value;
        }

        ++first;
      }

      return count_value;
    }

    template<typename forward_iterator,
             typename value_type>
    forward_iterator lower_bound(forward_iterator first,
                                 forward_iterator last,
                                 const value_type& value)
    {
      typename std::iterator_traits<forward_iterator>::difference_type count = std::distance(first, last);
      typename std::iterator_traits<forward_iterator>::difference_type step;

      while(count > 0)
      {
        forward_iterator it = first;

        step = count / 2;
        std::advance(it, step);

        if(*it < value)
        {
          first  = ++it;
          count -= step + 1;
        }
        else
        {
          count = step;
        }
      }

      return first;
    }

    template<typename forward_iterator,
             typename value_type,
             typename binary_function_type>
    forward_iterator lower_bound(forward_iterator first,
                                 forward_iterator last,
                                 const value_type& value,
                                 binary_function_type binary_function)
    {
      typename std::iterator_traits<forward_iterator>::difference_type step;

      typename std::iterator_traits<forward_iterator>::difference_type count =
        std::distance(first,last);

      while(count > 0)
      {
        forward_iterator it = first;
        step = count / 2;
        std::advance(it, step);

        if(binary_function(*it, value))
        {
          first = ++it;
          count -= step + 1;
        }
        else
        {
          count = step;
        }
      }

      return first;
    }

    template<typename forward_iterator,
             typename value_type>
    bool binary_search(forward_iterator first,
                       forward_iterator last,
                       const value_type& value)
    {
      first = std::lower_bound(first, last, value);

      return (!(first == last) && !(value < *first));
    }

    template<typename forward_iterator,
             typename value_type,
             typename binary_function_type>
    bool binary_search(forward_iterator first,
                       forward_iterator last,
                       const value_type& value,
                       binary_function_type binary_function)
    {
      first = std::lower_bound(first, last, value, binary_function);

      return (!(first == last) && !(binary_function(value, *first)));
    }

    template<typename forward_iterator,
             typename difference_type,
             typename value_type>
    forward_iterator search_n(forward_iterator  first,
                              forward_iterator  last,
                              difference_type   count_value,
                              const value_type& search_value)
    {
      forward_iterator limit = first;

      difference_type index;

      for(index = difference_type(0); index < difference_type((last - first) - count_value); ++index)
      {
        ++limit;
      }

      while(first != limit)
      {
        forward_iterator it = first;

        index = difference_type(0);

        while(*it == search_value)
        {
          ++it;
          ++index;

          if(index == count_value)
          {
            return first;
          }
        }

        ++first;
      }

      return last;
    }

    template<typename forward_iterator,
             typename difference_type,
             typename value_type,
             typename binary_function_type>
    forward_iterator search_n(forward_iterator     first,
                              forward_iterator     last,
                              difference_type      count_value,
                              const value_type&    search_value,
                              binary_function_type binary_function)
    {
      forward_iterator limit = first;

      difference_type index;

      for(index = difference_type(0); index < difference_type((last - first) - count_value); ++index)
      {
        ++limit;
      }

      while(first != limit)
      {
        forward_iterator it = first;

        index = difference_type(0);

        while(binary_function(*it, search_value))
        {
          ++it;
          ++index;

          if(index == count_value)
          {
            return first;
          }
        }

        ++first;
      }

      return last;
    }

    template<typename swap_type>
    void swap(swap_type& left,
              swap_type& right)
    {
      if(&left != &right)
      {
        const swap_type tmp(left);

        left  = right;
        right = tmp;
      }
    }

    template<typename input_iterator1,
             typename input_iterator2>
    void iter_swap(input_iterator1 left,
                   input_iterator2 right)
    {
      typedef typename std::iterator_traits<input_iterator1>::value_type value_left_type;
      typedef typename std::iterator_traits<input_iterator2>::value_type value_right_type;

      const value_left_type tmp(*left);

      *left  = value_left_type (*right);
      *right = value_right_type(tmp);
    }

    template<typename input_iterator1,
             typename input_iterator2>
    input_iterator2 swap_ranges(input_iterator1 first1,
                                input_iterator1 last1,
                                input_iterator2 first2)
    {
      while(first1 != last1)
      {
        iter_swap(first1, first2);

        ++first1;
        ++first2;
      }

      return first2;
    }

    template<typename value_type,
             std::size_t N>
    void swap(value_type(&left) [N],
              value_type(&right)[N])
    {
      swap_ranges(&left[0U], &left[N], &right[0U]);
    }

    template<typename random_access_iterator,
             typename unary_function_type>
    random_access_iterator partition(random_access_iterator first,
                                     random_access_iterator last,
                                     unary_function_type    unary_function)
    {
      for( ; ; ++first)
      {
        for( ; (first != last) && (unary_function(*first) == true); ++first)
        {
          ;
        }

        if(first == last)
        {
          break;
        }

        for( ; (first != --last) && (unary_function(*last) == false); )
        {
          ;
        }

        if(first == last)
        {
          break;
        }

        iter_swap(first, last);
      }

      return first;
    }
  }

#endif // ALGORITHM_2010_02_23_
