///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2016.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef LIMITS_2010_02_23_
  #define LIMITS_2010_02_23_

  #if defined(__GNUC__)
  #pragma GCC system_header
  #endif

  #include <float.h>
  #include <limits.h>

  // Implement some of <limits> for compilers that do not support it.
  // The implementation was partly inspired by some concepts in GCC's
  // implementation of <limits>.

  #if defined(__GNUC__) && defined(__XTENSA__)
  extern "C++" {
  #endif
  namespace std
  {
    #define CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS  true
    #define CONCEPT_FROM_GLIBCXX_IS_SIGNED(T)    ((static_cast<T>(-1) < static_cast<T>(0)) ? 1 : 0)
    #define CONCEPT_FROM_GLIBCXX_DIGITS(T)       ((static_cast<int>(sizeof(T)) * CHAR_BIT) - CONCEPT_FROM_GLIBCXX_IS_SIGNED(T))
    #define CONCEPT_FROM_GLIBCXX_DIGITS10(T)     static_cast<int>((CONCEPT_FROM_GLIBCXX_DIGITS(T) * 643LL) / 2136LL)
    #define CONCEPT_FROM_GLIBCXX_MAX_DIGITS10(T) static_cast<int>((2 + ((T) * 643LL)) / 2136LL)

    typedef enum enum_float_denorm_style
    {
      denorm_indeterminate = -1,
      denorm_absent        =  0,
      denorm_present       =  1
    }
    float_denorm_style;

    typedef enum enum_float_round_style
    {
      round_indeterminate       = -1,
      round_toward_zero         =  0,
      round_to_nearest          =  1,
      round_toward_infinity     =  2,
      round_toward_neg_infinity =  3
    }
    float_round_style;

    // Forward declaration of the numeric_limits template class.
    template<typename T>
    class numeric_limits;

    class numeric_limits_details
    {
    private:
      static constexpr long long my_long_long_max = 0x7FFFFFFFFFFFFFFFLL;

      // The following values for float, double, and long double are provided
      // in a separate file that is dependent on the AVR architecture.

      #if defined(__GNUC__)
      static constexpr float       my_value_that_needs_to_be_provided_flt_infinity()      { return __builtin_inff(); }
      static constexpr float       my_value_that_needs_to_be_provided_flt_quiet_NaN()     { return __builtin_nanf(""); }
      static constexpr float       my_value_that_needs_to_be_provided_flt_signaling_NaN() { return __builtin_nanf(""); }
      #endif
      #if defined(__IAR_SYSTEMS_ICC__)
      static constexpr float       my_value_that_needs_to_be_provided_flt_infinity()      { return 0.Infinity; }
      static constexpr float       my_value_that_needs_to_be_provided_flt_quiet_NaN()     { return 0.NaN; }
      static constexpr float       my_value_that_needs_to_be_provided_flt_signaling_NaN() { return 0.NaN; }
      #endif
      static constexpr float       my_value_that_needs_to_be_provided_flt_denorm_min()    { return FLT_MIN; }

      #if defined(__GNUC__)
      #if defined(__AVR__) && (__SIZEOF_DOUBLE__ == 8)
      static constexpr double      my_value_that_needs_to_be_provided_dbl_infinity()      { return __builtin_infl(); }
      static constexpr double      my_value_that_needs_to_be_provided_dbl_quiet_NaN()     { return __builtin_nanl(""); }
      static constexpr double      my_value_that_needs_to_be_provided_dbl_signaling_NaN() { return __builtin_nanl(""); }
      #else
      static constexpr double      my_value_that_needs_to_be_provided_dbl_infinity()      { return __builtin_inf(); }
      static constexpr double      my_value_that_needs_to_be_provided_dbl_quiet_NaN()     { return __builtin_nan(""); }
      static constexpr double      my_value_that_needs_to_be_provided_dbl_signaling_NaN() { return __builtin_nan(""); }
      #endif
      #endif
      #if defined(__IAR_SYSTEMS_ICC__)
      static constexpr double      my_value_that_needs_to_be_provided_dbl_infinity()      { return 0.Infinity; }
      static constexpr double      my_value_that_needs_to_be_provided_dbl_quiet_NaN()     { return 0.NaN; }
      static constexpr double      my_value_that_needs_to_be_provided_dbl_signaling_NaN() { return 0.NaN; }
      #endif
      static constexpr double      my_value_that_needs_to_be_provided_dbl_denorm_min()    { return DBL_MIN; }

      #if defined(__GNUC__)
      static constexpr long double my_value_that_needs_to_be_provided_ldbl_infinity()      { return __builtin_infl(); }
      static constexpr long double my_value_that_needs_to_be_provided_ldbl_quiet_NaN()     { return __builtin_nanl(""); }
      static constexpr long double my_value_that_needs_to_be_provided_ldbl_signaling_NaN() { return __builtin_nanl(""); }
      #endif
      #if defined(__IAR_SYSTEMS_ICC__)
      static constexpr long double my_value_that_needs_to_be_provided_ldbl_infinity()      { return 0.Infinity; }
      static constexpr long double my_value_that_needs_to_be_provided_ldbl_quiet_NaN()     { return 0.NaN; }
      static constexpr long double my_value_that_needs_to_be_provided_ldbl_signaling_NaN() { return 0.NaN; }
      #endif
      static constexpr long double my_value_that_needs_to_be_provided_ldbl_denorm_min()    { return LDBL_MIN; }

      template<typename T>
      friend class numeric_limits;
    };

    template<typename T>
    class numeric_limits
    {
    public:
      static constexpr bool is_specialized = false;
      static constexpr int digits = 0;
      static constexpr int digits10 = 0;
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = false;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 0;
      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;
      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = false;
      static constexpr bool is_modulo = false;
      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;

      static constexpr T (min)() throw()         { return static_cast<T>(0); }
      static constexpr T (max)() throw()         { return static_cast<T>(0); }
      static constexpr T lowest() throw()        { return static_cast<T>(0); }
      static constexpr T epsilon() throw()       { return static_cast<T>(0); }
      static constexpr T round_error() throw()   { return static_cast<T>(0); }
      static constexpr T infinity() throw()      { return static_cast<T>(0); }
      static constexpr T quiet_NaN() throw()     { return static_cast<T>(0); }
      static constexpr T signaling_NaN() throw() { return static_cast<T>(0); }
      static constexpr T denorm_min() throw()    { return static_cast<T>(0); }
    };

    // Specialization for bool.
    template<>
    class numeric_limits<bool>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr bool (min)() throw()  { return false; }
      static constexpr bool (max)() throw()  { return true; }
      static constexpr bool lowest() throw() { return (min)(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool epsilon() throw()     { return false; }
      static constexpr bool round_error() throw() { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool infinity() throw()      { return false; }
      static constexpr bool quiet_NaN() throw()     { return false; }
      static constexpr bool signaling_NaN() throw() { return false; }
      static constexpr bool denorm_min() throw()    { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for char.
    template<>
    class numeric_limits<char>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr char (min)() throw()  { return CHAR_MIN; }
      static constexpr char (max)() throw()  { return CHAR_MAX; }
      static constexpr char lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(char);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(char);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = CONCEPT_FROM_GLIBCXX_IS_SIGNED(char);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char epsilon() throw()     { return 0; }
      static constexpr char round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char infinity() throw()      { return char(); }
      static constexpr char quiet_NaN() throw()     { return char(); }
      static constexpr char signaling_NaN() throw() { return char(); }
      static constexpr char denorm_min() throw()    { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for signed char.
    template<>
    class numeric_limits<signed char>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr signed char (min)() throw()  { return -SCHAR_MAX - 1; }
      static constexpr signed char (max)() throw()  { return  SCHAR_MAX; }
      static constexpr signed char lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(signed char);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(signed char);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char epsilon() throw()     { return 0; }
      static constexpr signed char round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char infinity() throw()      { return static_cast<signed char>(0); }
      static constexpr signed char quiet_NaN() throw()     { return static_cast<signed char>(0); }
      static constexpr signed char signaling_NaN() throw() { return static_cast<signed char>(0); }
      static constexpr signed char denorm_min() throw()    { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for unsigned char.
    template<>
    class numeric_limits<unsigned char>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr unsigned char (min)() throw()  { return 0; }
      static constexpr unsigned char (max)() throw()  { return (SCHAR_MAX * 2U) + 1; }
      static constexpr unsigned char lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(unsigned char);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(unsigned char);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char epsilon() throw()     { return 0; }
      static constexpr unsigned char round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char infinity() throw()      { return static_cast<unsigned char>(0); }
      static constexpr unsigned char quiet_NaN() throw()     { return static_cast<unsigned char>(0); }
      static constexpr unsigned char signaling_NaN() throw() { return static_cast<unsigned char>(0); }
      static constexpr unsigned char denorm_min() throw()    { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


    // Specialization for short.
    template<>
    class numeric_limits<short>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr short (min)() throw()  { return -SHRT_MAX - 1; }
      static constexpr short (max)() throw()  { return  SHRT_MAX; }
      static constexpr short lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(short);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(short);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short epsilon() throw()     { return 0; }
      static constexpr short round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short infinity() throw()      { return short(); }
      static constexpr short quiet_NaN() throw()     { return short(); }
      static constexpr short signaling_NaN() throw() { return short(); }
      static constexpr short denorm_min() throw()    { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for unsigned short.
    template<>
    class numeric_limits<unsigned short>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr unsigned short (min)() throw()  { return 0; }
      static constexpr unsigned short (max)() throw()  { return (SHRT_MAX * 2U) + 1; }
      static constexpr unsigned short lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(unsigned short);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(unsigned short);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short epsilon() throw()     { return 0; }
      static constexpr unsigned short round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short infinity() throw()      { return static_cast<unsigned short>(0); }
      static constexpr unsigned short quiet_NaN() throw()     { return static_cast<unsigned short>(0); }
      static constexpr unsigned short signaling_NaN() throw() { return static_cast<unsigned short>(0); }
      static constexpr unsigned short denorm_min() throw()    { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for int.
    template<>
    class numeric_limits<int>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr int (min)() throw()  { return -INT_MAX - 1; }
      static constexpr int (max)() throw()  { return INT_MAX; }
      static constexpr int lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(int);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(int);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int epsilon() throw()     { return 0; }
      static constexpr int round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int infinity() throw()      { return static_cast<int>(0); }
      static constexpr int quiet_NaN() throw()     { return static_cast<int>(0); }
      static constexpr int signaling_NaN() throw() { return static_cast<int>(0); }
      static constexpr int denorm_min() throw()    { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for unsigned int.
    template<>
    class numeric_limits<unsigned int>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr unsigned int (min)() throw()  { return 0; }
      static constexpr unsigned int (max)() throw()  { return (INT_MAX * 2U) + 1; }
      static constexpr unsigned int lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(unsigned int);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(unsigned int);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int epsilon() throw()     { return 0; }
      static constexpr unsigned int round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int infinity() throw()      { return static_cast<unsigned int>(0); }
      static constexpr unsigned int quiet_NaN() throw()     { return static_cast<unsigned int>(0); }
      static constexpr unsigned int signaling_NaN() throw() { return static_cast<unsigned int>(0); }
      static constexpr unsigned int denorm_min() throw()    { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for long.
    template<>
    class numeric_limits<long>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr long (min)() throw()  { return -LONG_MAX - 1; }
      static constexpr long (max)() throw()  { return LONG_MAX; }
      static constexpr long lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(long);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(long);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long epsilon() throw()     { return 0; }
      static constexpr long round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long infinity() throw()      { return static_cast<long>(0); }
      static constexpr long quiet_NaN() throw()     { return static_cast<long>(0); }
      static constexpr long signaling_NaN() throw() { return static_cast<long>(0); }
      static constexpr long denorm_min() throw()    { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for unsigned long.
    template<>
    class numeric_limits<unsigned long>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr unsigned long (min)() throw()  { return 0; }
      static constexpr unsigned long (max)() throw()  { return (LONG_MAX * 2UL) + 1; }
      static constexpr unsigned long lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(unsigned long);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(unsigned long);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long epsilon() throw()     { return 0; }
      static constexpr unsigned long round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long infinity() throw()      { return static_cast<unsigned long>(0); }
      static constexpr unsigned long quiet_NaN() throw()     { return static_cast<unsigned long>(0); }
      static constexpr unsigned long signaling_NaN() throw() { return static_cast<unsigned long>(0); }
      static constexpr unsigned long denorm_min() throw()    { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for long long.
    template<>
    class numeric_limits<long long>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr long long (min)() throw()  { return -numeric_limits_details::my_long_long_max - 1; }
      static constexpr long long (max)() throw()  { return  numeric_limits_details::my_long_long_max; }
      static constexpr long long lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(long long);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(long long);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long epsilon() throw()     { return 0; }
      static constexpr long long round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long infinity() throw()      { return static_cast<long long>(0); }
      static constexpr long long quiet_NaN() throw()     { return static_cast<long long>(0); }
      static constexpr long long signaling_NaN() throw() { return static_cast<long long>(0); }
      static constexpr long long denorm_min() throw()    { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for unsigned long long.
    template<>
    class numeric_limits<unsigned long long>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long (min)() throw()  { return 0; }
      static constexpr unsigned long long (max)() throw()  { return (numeric_limits_details::my_long_long_max * 2ULL) + 1; }
      static constexpr unsigned long long lowest() throw() { return (min)(); }

      static constexpr int digits = CONCEPT_FROM_GLIBCXX_DIGITS(unsigned long long);
      static constexpr int digits10 = CONCEPT_FROM_GLIBCXX_DIGITS10(unsigned long long);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long epsilon() throw()     { return 0; }
      static constexpr unsigned long long round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;
      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long infinity() throw()      { return static_cast<unsigned long long>(0); }
      static constexpr unsigned long long quiet_NaN() throw()     { return static_cast<unsigned long long>(0); }
      static constexpr unsigned long long signaling_NaN() throw() { return static_cast<unsigned long long>(0); }
      static constexpr unsigned long long denorm_min() throw()    { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;
      static constexpr bool traps = CONCEPT_FROM_GLIBCXX_INTEGRAL_TRAPS;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };

    // Specialization for float.
    template<>
    class numeric_limits<float>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr float (min)() throw()  { return  FLT_MIN; }
      static constexpr float (max)() throw()  { return  FLT_MAX; }
      static constexpr float lowest() throw() { return -FLT_MAX; }

      static constexpr int digits = FLT_MANT_DIG;
      static constexpr int digits10 = FLT_DIG;
      static constexpr int max_digits10 = CONCEPT_FROM_GLIBCXX_MAX_DIGITS10(FLT_MANT_DIG);
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = FLT_RADIX;

      static constexpr float epsilon() throw()     { return FLT_EPSILON; }
      static constexpr float round_error() throw() { return 0.5F; }

      static constexpr int min_exponent = FLT_MIN_EXP;
      static constexpr int min_exponent10 = FLT_MIN_10_EXP;
      static constexpr int max_exponent = FLT_MAX_EXP;
      static constexpr int max_exponent10 = FLT_MAX_10_EXP;

      static constexpr bool has_infinity = true;
      static constexpr bool has_quiet_NaN = true;
      static constexpr bool has_signaling_NaN = false;
      static constexpr bool has_denorm = true;
      static constexpr bool has_denorm_loss = false;

      static constexpr float infinity() throw()      { return numeric_limits_details::my_value_that_needs_to_be_provided_flt_infinity(); }
      static constexpr float quiet_NaN() throw()     { return numeric_limits_details::my_value_that_needs_to_be_provided_flt_quiet_NaN(); }
      static constexpr float signaling_NaN() throw() { return numeric_limits_details::my_value_that_needs_to_be_provided_flt_signaling_NaN(); }
      static constexpr float denorm_min() throw()    { return numeric_limits_details::my_value_that_needs_to_be_provided_flt_denorm_min(); }

      static constexpr bool is_iec559 = true;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_to_nearest;
    };

    // Specialization for double.
    template<>
    class numeric_limits<double>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr double (min)() throw()  { return  DBL_MIN; }
      static constexpr double (max)() throw()  { return  DBL_MAX; }
      static constexpr double lowest() throw() { return -DBL_MAX; }

      static constexpr int digits = DBL_MANT_DIG;
      static constexpr int digits10 = DBL_DIG;
      static constexpr int max_digits10 = CONCEPT_FROM_GLIBCXX_MAX_DIGITS10(DBL_MANT_DIG);
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2; // DBL_RADIX;

      static constexpr double epsilon() throw()     { return DBL_EPSILON; }
      static constexpr double round_error() throw() { return 0.5; }

      static constexpr int min_exponent = DBL_MIN_EXP;
      static constexpr int min_exponent10 = DBL_MIN_10_EXP;
      static constexpr int max_exponent = DBL_MAX_EXP;
      static constexpr int max_exponent10 = DBL_MAX_10_EXP;

      static constexpr bool has_infinity = true;
      static constexpr bool has_quiet_NaN = true;
      static constexpr bool has_signaling_NaN = false;
      static constexpr bool has_denorm = true;
      static constexpr bool has_denorm_loss = false;

      static constexpr double infinity() throw()      { return numeric_limits_details::my_value_that_needs_to_be_provided_dbl_infinity(); }
      static constexpr double quiet_NaN() throw()     { return numeric_limits_details::my_value_that_needs_to_be_provided_dbl_quiet_NaN(); }
      static constexpr double signaling_NaN() throw() { return numeric_limits_details::my_value_that_needs_to_be_provided_dbl_signaling_NaN(); }
      static constexpr double denorm_min() throw()    { return numeric_limits_details::my_value_that_needs_to_be_provided_dbl_denorm_min(); }

      static constexpr bool is_iec559 = true;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_to_nearest;
    };

    // Specialization for long double.
    template<>
    class numeric_limits<long double>
    {
    public:
      static constexpr bool is_specialized = true;

      static constexpr long double (min)() throw()  { return  LDBL_MIN; }
      static constexpr long double (max)() throw()  { return  LDBL_MAX; }
      static constexpr long double lowest() throw() { return -LDBL_MAX; }

      static constexpr int digits = LDBL_MANT_DIG;
      static constexpr int digits10 = LDBL_DIG;
      static constexpr int max_digits10 = CONCEPT_FROM_GLIBCXX_MAX_DIGITS10(LDBL_MANT_DIG);
      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2; // DBL_RADIX;

      static constexpr long double epsilon() throw()     { return LDBL_EPSILON; }
      static constexpr long double round_error() throw() { return 0.5; }

      static constexpr int min_exponent = LDBL_MIN_EXP;
      static constexpr int min_exponent10 = LDBL_MIN_10_EXP;
      static constexpr int max_exponent = LDBL_MAX_EXP;
      static constexpr int max_exponent10 = LDBL_MAX_10_EXP;

      static constexpr bool has_infinity = true;
      static constexpr bool has_quiet_NaN = true;
      static constexpr bool has_signaling_NaN = false;
      static constexpr bool has_denorm = true;
      static constexpr bool has_denorm_loss = false;

      static constexpr long double infinity() throw()      { return numeric_limits_details::my_value_that_needs_to_be_provided_ldbl_infinity(); }
      static constexpr long double quiet_NaN() throw()     { return numeric_limits_details::my_value_that_needs_to_be_provided_ldbl_quiet_NaN(); }
      static constexpr long double signaling_NaN() throw() { return numeric_limits_details::my_value_that_needs_to_be_provided_ldbl_signaling_NaN(); }
      static constexpr long double denorm_min() throw()    { return numeric_limits_details::my_value_that_needs_to_be_provided_ldbl_denorm_min(); }

      static constexpr bool is_iec559 = true;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_to_nearest;
    };
  }
  #if defined(__GNUC__) && defined(__XTENSA__)
  }
  #endif

#endif // LIMITS_2010_02_23_
