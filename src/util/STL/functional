///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2022.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef FUNCTIONAL_2013_08_30_
  #define FUNCTIONAL_2013_08_30_

  #include <memory>
  #include <type_traits>
  #include <utility>

  namespace std
  {
    namespace xfunctional_impl
    {
      template <typename T> constexpr T& func_ref_or_moveref(T& t) noexcept { return t; }
      template <typename T> void func_ref_or_moveref(T&&) = delete;
    }

    template<typename T>
    class reference_wrapper
    {
    public:
      typedef T type;

      template<typename U,
               class = decltype(xfunctional_impl::func_ref_or_moveref<T>(std::declval<U>()),
                                std::enable_if_t<(std::is_same<reference_wrapper, std::remove_cvref_t<U>>::value == false)>())>
      constexpr reference_wrapper(U&& u) noexcept(noexcept(xfunctional_impl::func_ref_or_moveref<T>(std::forward<U>(u))))
        : my_ptr(std::addressof(xfunctional_impl::func_ref_or_moveref<T>(std::forward<U>(u)))) { }

      reference_wrapper(const reference_wrapper&) noexcept = default;

      reference_wrapper& operator=(const reference_wrapper& x) noexcept = default;

      constexpr operator T& () const noexcept { return *my_ptr; }
      constexpr T& get() const noexcept { return *my_ptr; }

      //template< class... ArgTypes >
      //constexpr std::invoke_result_t<T&, ArgTypes...>
      //operator() ( ArgTypes&&... args ) const
      //{
      //  return std::invoke(get(), std::forward<ArgTypes>(args)...);
      //}
 
    private:
      T* my_ptr;
    };

    //template<typename T>
    //reference_wrapper(T&) -> reference_wrapper<T>;

    template<typename T>
    struct identity
    {
      using type = T;
    };

    template<typename argument1,
             typename result>
    struct unary_function
    {
      typedef argument1 argument_type;
      typedef result    result_type;
    };

    template<typename argument1,
             typename argument2,
             typename result>
    struct binary_function
    {
      typedef argument1 first_argument_type;
      typedef argument2 second_argument_type;
      typedef result    result_type;
    };

    template<typename operand_type>
    struct plus : public std::binary_function<operand_type, operand_type, operand_type>
    {
      operand_type operator()(const operand_type& left, const operand_type& right) const
      {
        return left + right;
      }
    };

    template<typename operand_type>
    struct minus : public std::binary_function<operand_type, operand_type, operand_type>
    {
      operand_type operator()(const operand_type& left, const operand_type& right) const
      {
        return left - right;
      }
    };

    template<typename operand_type>
    struct multiplies : public std::binary_function<operand_type, operand_type, operand_type>
    {
      operand_type operator()(const operand_type& left, const operand_type& right) const
      {
        return left * right;
      }
    };

    template<typename operand_type>
    struct divides : public std::binary_function<operand_type, operand_type, operand_type>
    {
      operand_type operator()(const operand_type& left, const operand_type& right) const
      {
        return left / right;
      }
    };

    template<typename operand_type>
    struct modulus : public std::binary_function<operand_type, operand_type, operand_type>
    {
      operand_type operator()(const operand_type& left, const operand_type& right) const
      {
        return left % right;
      }
    };

    template<typename T>
    struct equal_to : public binary_function<T, T, bool>
    {
      bool operator()(const T& left, const T& right) const
      {
        return (left == right);
      }
    };

    template<typename T>
    struct not_equal_to : public binary_function<T, T, bool>
    {
      bool operator()(const T& left, const T& right) const
      {
        return (left != right);
      }
    };

    template<typename T>
    struct less : public binary_function<T, T, bool>
    {
      bool operator()(const T& left, const T& right) const
      {
        return (left < right);
      }
    };

    template<typename T>
    struct less_equal : public binary_function<T, T, bool>
    {
      bool operator()(const T& left, const T& right) const
      {
        return (left <= right);
      }
    };

    template<typename T>
    struct greater : public binary_function<T, T, bool>
    {
      bool operator()(const T& left, const T& right) const
      {
        return (left > right);
      }
    };

    template<typename T>
    struct greater_equal : public binary_function<T, T, bool>
    {
      bool operator()(const T& left, const T& right) const
      {
        return (left >= right);
      }
    };

    template<typename function_type>
    class unary_binder : public std::unary_function<typename function_type::second_argument_type,
                                                    typename function_type::result_type>
    {
    public:
      typedef std::unary_function<typename function_type::second_argument_type,
                                  typename function_type::result_type>
      base_type;

      typedef typename base_type::first_argument_type argument_type;
      typedef typename base_type::result_type         result_type;

      unary_binder(const function_type& function,
                   const typename function_type::first_argument_type& left) : operation(function),
                                                                              value    (left) { }

      result_type operator()(const argument_type& right) const
      {
        return (operation(value, right));
      }

      result_type operator()(argument_type& right) const
      {
        return (operation(value, right));
      }

    protected:
      function_type operation;

      typename function_type::first_argument_type value;
    };

    template<typename function_type,
             typename value_type>
    unary_binder<function_type> bind1st(const function_type& function, const value_type& left)
    {
      typename function_type::first_argument_type the_value(left);

      return std::unary_binder<function_type>(function, the_value);
    }

    template<class function_type2>
    class binder2nd : public unary_function<typename function_type2::first_argument_type,
                                            typename function_type2::result_type>
    {
    public:
      typedef unary_function<typename function_type2::first_argument_type,
                             typename function_type2::result_type> base_type;

      typedef typename base_type::argument_type argument_type;
      typedef typename base_type::result_type   result_type;

      binder2nd(const function_type2& function,
                const typename function_type2::second_argument_type& right)
        : my_function(function),
          my_value   (right) { }

      result_type operator()(const argument_type& left) const
      {
        return my_function(left, my_value);
      }

      result_type operator()(argument_type& left) const
      {
        return my_function(left, my_value);
      }

    protected:
      function_type2                                my_function;
      typename function_type2::second_argument_type my_value;
    };

    template<typename function_type, typename T>
    binder2nd<function_type> bind2nd(const function_type& function, const T& right)
    {
      typename function_type::second_argument_type value(right);

      return binder2nd<function_type>(function, value);
    }
  }

#endif // FUNCTIONAL_2013_08_30_
