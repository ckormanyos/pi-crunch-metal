// This is significant simplification of an existing work:

// This is an implementation of std::span from P0122R7
// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0122r7.pdf

///////////////////////////////////////////////////////////////////////////////
// Copyright Tristan Brindle 2018.
// Copyright Christopher Kormanyos 2019.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file ../../LICENSE_1_0.txt or copy at
// https://www.boost.org/LICENSE_1_0.txt)
//

#ifndef SPAN_2019_07_27_
  #define SPAN_2019_07_27_

  #include <array>
  #include <cstddef>
  #include <type_traits>

  #include <impl/stl_local_constexpr.h>
  #include <impl/stl_local_noexcept.h>

  namespace std {

  using byte = unsigned char;

  STL_LOCAL_CONSTEXPR std::size_t dynamic_extent =
    (std::numeric_limits<std::size_t>::max)();

  template<typename ElementType,
           std::ptrdiff_t Extent = dynamic_extent>
  class span;

  namespace detail {

  template<typename E,
           std::ptrdiff_t S>
  struct span_storage
  {
    STL_LOCAL_CONSTEXPR span_storage() STL_LOCAL_NOEXCEPT
      : ptr(nullptr) { }

    STL_LOCAL_CONSTEXPR span_storage(E* ptr_in, std::ptrdiff_t) STL_LOCAL_NOEXCEPT
      : ptr(ptr_in) { }

    E* ptr;
    static STL_LOCAL_CONSTEXPR std::ptrdiff_t size = S;
  };

  template<typename E>
  struct span_storage<E, dynamic_extent>
  {
    STL_LOCAL_CONSTEXPR span_storage() STL_LOCAL_NOEXCEPT
      : ptr (nullptr),
        size(0U) { }

    STL_LOCAL_CONSTEXPR span_storage(E* ptr_in, std::ptrdiff_t size_in) STL_LOCAL_NOEXCEPT
      : ptr (ptr_in),
        size(size_in) { }

    E*             ptr;
    std::ptrdiff_t size;
  };

  // Reimplementation of C++17 std::size() and std::data()
  template<typename C>
  STL_LOCAL_CONSTEXPR auto size(const C& c) -> decltype(c.size())
  {
    return c.size();
  }

  template<typename T, std::size_t N>
  STL_LOCAL_CONSTEXPR std::size_t size(const T (&)[N]) STL_LOCAL_NOEXCEPT
  {
    return N;
  }

  template<typename C>
  STL_LOCAL_CONSTEXPR auto data(C& c) -> decltype(c.data())
  {
    return c.data();
  }

  template<typename C>
  STL_LOCAL_CONSTEXPR auto data(const C& c) -> decltype(c.data())
  {
    return c.data();
  }

  template<typename T, std::size_t N>
  STL_LOCAL_CONSTEXPR T* data(T (&array)[N]) STL_LOCAL_NOEXCEPT
  {
    return array;
  }

  template<typename E>
  STL_LOCAL_CONSTEXPR const E* data(std::initializer_list<E> il) STL_LOCAL_NOEXCEPT
  {
    return il.begin();
  }
  }

  template<typename ElementType, std::ptrdiff_t Extent>
  class span
  {
  private:
    using storage_type = detail::span_storage<ElementType, Extent>;

  public:
    using element_type           = ElementType;
    using value_type             = typename std::remove_cv<ElementType>::type;
    using index_type             = std::ptrdiff_t;
    using difference_type        = std::ptrdiff_t;
    using pointer                = ElementType*;
    using reference              = ElementType&;
    using iterator               = pointer;
    using const_iterator         = const ElementType*;
    using reverse_iterator       = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    static STL_LOCAL_CONSTEXPR index_type extent = Extent;

    // [span.cons], span constructors, copy, assignment, and destructor
    template<std::ptrdiff_t E = Extent,
              typename std::enable_if<E <= 0, int>::type = 0>
    STL_LOCAL_CONSTEXPR span() STL_LOCAL_NOEXCEPT { }

    STL_LOCAL_CONSTEXPR span(pointer ptr, index_type count)
      : storage_(ptr, count) { }

    STL_LOCAL_CONSTEXPR span(pointer first_elem, pointer last_elem)
      : storage_(first_elem, last_elem - first_elem) { }

    template<std::size_t N,
             std::ptrdiff_t E = Extent>
    STL_LOCAL_CONSTEXPR span(element_type(&arr)[N]) STL_LOCAL_NOEXCEPT
      : storage_(arr, N) { }

    template<std::size_t N,
             std::ptrdiff_t E = Extent>
    STL_LOCAL_CONSTEXPR span(const std::array<value_type, N>& arr) STL_LOCAL_NOEXCEPT
        : storage_(arr.data(), N) { }

    template<typename Container>
    STL_LOCAL_CONSTEXPR span(Container& cont)
        : storage_(detail::data(cont), detail::size(cont)) { }

    template<typename Container>
    STL_LOCAL_CONSTEXPR span(const Container& cont)
        : storage_(detail::data(cont), detail::size(cont)) { }

    STL_LOCAL_CONSTEXPR span(const span& other) STL_LOCAL_NOEXCEPT = default;

    template<typename OtherElementType, std::ptrdiff_t OtherExtent,
              typename std::enable_if<
                (Extent == OtherExtent || Extent == dynamic_extent)>::value = 0>
    STL_LOCAL_CONSTEXPR span(const span<OtherElementType, OtherExtent>& other) STL_LOCAL_NOEXCEPT
        : storage_(other.data(), other.size()) { }

    ~span() STL_LOCAL_NOEXCEPT = default;

    span& operator=(const span& other) STL_LOCAL_NOEXCEPT = default;

    // [span.sub], span subviews
    template<std::ptrdiff_t Count>
    STL_LOCAL_CONSTEXPR span<element_type, Count> first() const
    {
      return {data(), Count};
    }

    template<std::ptrdiff_t Count>
    STL_LOCAL_CONSTEXPR span<element_type, Count> last() const
    {
      return {data() + (size() - Count), Count};
    }

    template<std::ptrdiff_t Offset,
             std::ptrdiff_t Count = dynamic_extent>
    using subspan_return_t =
        span<ElementType, Count != dynamic_extent
                              ? Count
                              : (Extent != dynamic_extent ? Extent - Offset
                                                          : dynamic_extent)>;

    template<std::ptrdiff_t Offset,
             std::ptrdiff_t Count = dynamic_extent>
    STL_LOCAL_CONSTEXPR subspan_return_t<Offset, Count> subspan() const
    {
        return {data() + Offset,
                Count != dynamic_extent
                    ? Count
                    : (Extent != dynamic_extent ? Extent - Offset
                                                : size() - Offset)};
    }

    STL_LOCAL_CONSTEXPR span<element_type, dynamic_extent>
    first(index_type count) const
    {
      return {data(), count};
    }

    STL_LOCAL_CONSTEXPR span<element_type, dynamic_extent>
    last(index_type count) const
    {
      return {data() + (size() - count), count};
    }

    STL_LOCAL_CONSTEXPR span<element_type, dynamic_extent>
    subspan(index_type offset, index_type count = dynamic_extent) const
    {
      return {data() + offset,
              count == dynamic_extent ? size() - offset : count};
    }

    // [span.obs], span observers
    STL_LOCAL_CONSTEXPR index_type size() const STL_LOCAL_NOEXCEPT { return storage_.size; }

    STL_LOCAL_CONSTEXPR index_type size_bytes() const STL_LOCAL_NOEXCEPT
    {
      return size() * sizeof(element_type);
    }

    STL_LOCAL_CONSTEXPR bool empty() const STL_LOCAL_NOEXCEPT { return size() == 0; }

    // [span.elem], span element access
    STL_LOCAL_CONSTEXPR reference operator[](index_type idx) const
    {
      return *(data() + idx);
    }

    // Extension: not in P0122
    reference at(index_type idx) const
    {
        return this->operator[](idx);
    }

    STL_LOCAL_CONSTEXPR reference front() const
    {
      return *data();
    }

    STL_LOCAL_CONSTEXPR reference back() const
    {
      return *(data() + (size() - 1));
    }

    STL_LOCAL_CONSTEXPR pointer data() const STL_LOCAL_NOEXCEPT { return storage_.ptr; }

    // [span.iterators], span iterator support
    STL_LOCAL_CONSTEXPR iterator begin() const STL_LOCAL_NOEXCEPT { return data(); }

    STL_LOCAL_CONSTEXPR iterator end() const STL_LOCAL_NOEXCEPT { return data() + size(); }

    STL_LOCAL_CONSTEXPR const_iterator cbegin() const STL_LOCAL_NOEXCEPT { return begin(); }

    STL_LOCAL_CONSTEXPR const_iterator cend() const STL_LOCAL_NOEXCEPT { return end(); }

    STL_LOCAL_CONSTEXPR reverse_iterator rbegin() const STL_LOCAL_NOEXCEPT
    {
      return reverse_iterator(end());
    }

    STL_LOCAL_CONSTEXPR reverse_iterator rend() const STL_LOCAL_NOEXCEPT
    {
      return reverse_iterator(begin());
    }

    STL_LOCAL_CONSTEXPR const_reverse_iterator crbegin() const STL_LOCAL_NOEXCEPT
    {
      return const_reverse_iterator(cend());
    }

    STL_LOCAL_CONSTEXPR const_reverse_iterator crend() const STL_LOCAL_NOEXCEPT
    {
      return const_reverse_iterator(cbegin());
    }

  private:
    storage_type storage_{};
  };

  template<typename ElementType, std::ptrdiff_t Extent>
  STL_LOCAL_CONSTEXPR span<ElementType, Extent>
  make_span(span<ElementType, Extent> s) STL_LOCAL_NOEXCEPT
  {
    return s;
  }

  template<typename T, std::size_t N>
  STL_LOCAL_CONSTEXPR span<T, std::ptrdiff_t(N)> make_span(T (&arr)[N]) STL_LOCAL_NOEXCEPT
  {
    return {arr};
  }

  template<typename T, std::size_t N>
  STL_LOCAL_CONSTEXPR span<T, std::ptrdiff_t(N)> make_span(std::array<T, N>& arr) STL_LOCAL_NOEXCEPT
  {
    return {arr};
  }

  template<typename T, std::size_t N>
  STL_LOCAL_CONSTEXPR span<const T, std::ptrdiff_t(N)>
  make_span(const std::array<T, N>& arr) STL_LOCAL_NOEXCEPT
  {
    return {arr};
  }

  template<typename Container>
  STL_LOCAL_CONSTEXPR span<typename Container::value_type> make_span(Container& cont)
  {
    return {cont};
  }

  template<typename Container>
  STL_LOCAL_CONSTEXPR span<const typename Container::value_type>
  make_span(const Container& cont)
  {
    return {cont};
  }

  // Comparison operators
  // Implementation note: the implementations of == and < are equivalent to
  // 4-legged std::equal and std::lexicographical_compare respectively

  template<typename T, std::ptrdiff_t X, typename U, std::ptrdiff_t Y>
  bool operator==(span<T, X> lhs, span<U, Y> rhs)
  {
    if (lhs.size() != rhs.size())
    {
      return false;
    }

    for (std::ptrdiff_t i = 0; i < lhs.size(); i++)
    {
      if (lhs[i] != rhs[i])
      {
        return false;
      }
    }

    return true;
  }

  template<typename T, std::ptrdiff_t X, typename U, std::ptrdiff_t Y>
  bool operator!=(span<T, X> lhs, span<U, Y> rhs)
  {
    return !(lhs == rhs);
  }

  template<typename T, std::ptrdiff_t X, typename U, std::ptrdiff_t Y>
  bool operator<(span<T, X> lhs, span<U, Y> rhs)
  {
    // No std::min to avoid dragging in <algorithm>
    const std::ptrdiff_t size =
      lhs.size() < rhs.size() ? lhs.size() : rhs.size();

    for (std::ptrdiff_t i = 0; i < size; i++)
    {
      if (lhs[i] < rhs[i])
      {
        return true;
      }

      if (lhs[i] > rhs[i])
      {
        return false;
      }
    }

    return lhs.size() < rhs.size();
  }

  template<typename T, std::ptrdiff_t X, typename U, std::ptrdiff_t Y>
  bool operator<=(span<T, X> lhs, span<U, Y> rhs)
  {
    return !(rhs < lhs);
  }

  template<typename T, std::ptrdiff_t X, typename U, std::ptrdiff_t Y>
  bool operator>(span<T, X> lhs, span<U, Y> rhs)
  {
    return rhs < lhs;
  }

  template<typename T, std::ptrdiff_t X, typename U, std::ptrdiff_t Y>
  bool operator>=(span<T, X> lhs, span<U, Y> rhs)
  {
    return !(lhs < rhs);
  }

  template<typename ElementType, std::ptrdiff_t Extent>
  span<const byte, ((Extent == dynamic_extent)
                        ? dynamic_extent
                        : (static_cast<ptrdiff_t>(sizeof(ElementType)) * Extent))>
  as_bytes(span<ElementType, Extent> s) STL_LOCAL_NOEXCEPT
  {
    return {reinterpret_cast<const byte*>(s.data()), s.size_bytes()};
  }

  template<typename ElementType,
           ptrdiff_t Extent,
           typename std::enable_if<!std::is_const<ElementType>::value, int>::type = 0>
  span<byte, ((Extent == dynamic_extent)
                  ? dynamic_extent
                  : (static_cast<ptrdiff_t>(sizeof(ElementType)) * Extent))>
  as_writable_bytes(span<ElementType, Extent> s) STL_LOCAL_NOEXCEPT
  {
    return {reinterpret_cast<byte*>(s.data()), s.size_bytes()};
  }

  // Extension: nonmember subview operations

  template<std::ptrdiff_t Count, typename T>
  STL_LOCAL_CONSTEXPR auto first(T& t)
    -> decltype(make_span(t).template first<Count>())
  {
    return make_span(t).template first<Count>();
  }

  template<std::ptrdiff_t Count, typename T>
  STL_LOCAL_CONSTEXPR auto last(T& t)
    -> decltype(make_span(t).template last<Count>())
  {
    return make_span(t).template last<Count>();
  }

  template<std::ptrdiff_t Offset,
           std::ptrdiff_t Count = dynamic_extent,
           typename T>
  STL_LOCAL_CONSTEXPR auto subspan(T& t)
    -> decltype(make_span(t).template subspan<Offset, Count>())
  {
    return make_span(t).template subspan<Offset, Count>();
  }

  template<typename T>
  STL_LOCAL_CONSTEXPR auto first(T& t, std::ptrdiff_t count)
    -> decltype(make_span(t).first(count))
  {
    return make_span(t).first(count);
  }

  template<typename T>
  STL_LOCAL_CONSTEXPR
  auto last(T& t, std::ptrdiff_t count)
    -> decltype(make_span(t).last(count))
  {
    return make_span(t).last(count);
  }

  template<typename T>
  STL_LOCAL_CONSTEXPR
  auto subspan(T& t, std::ptrdiff_t offset,
               std::ptrdiff_t count = dynamic_extent)
    -> decltype(make_span(t).subspan(offset, count))
  {
    return make_span(t).subspan(offset, count);
  }

  } // namespace std

  // Extension: support for C++17 structured bindings

  namespace std {

  template<std::ptrdiff_t N, typename E, std::ptrdiff_t S>
  STL_LOCAL_CONSTEXPR auto get(span<E, S> s) -> decltype(s[N])
  {
    return s[N];
  }

  } // namespace std

  namespace std {

  template<typename E, ptrdiff_t S>
  class tuple_size<std::span<E, S>>
    : public integral_constant<size_t, std::size_t(S)> { };

  template<typename E>
  class tuple_size<std::span<E, std::dynamic_extent>>; // not defined

  template<size_t N,
           typename E,
           ptrdiff_t S>
  class tuple_element<N, std::span<E, S>>
  {
  public:
    using type = E;
  };

  } // end namespace std

#endif // SPAN_2019_07_27_
