///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2012 - 2019.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef ARRAY_2010_02_23_
  #define ARRAY_2010_02_23_

  #include <impl/stl_local_constexpr.h>

  #include <algorithm>
  #include <iterator>
  #include <type_traits>
  #include <tuple>

  // Implement most of std::array for compilers that do not yet support it.
  // See ISO/IEC 14882:2011 Chapter 23.3.2.

  namespace std
  {
    template<typename T, std::size_t N>
    class array
    {
    public:
      // Standard container-local type definitions.
      using size_type              = std::size_t;
      using difference_type        = std::ptrdiff_t;
      using value_type             = T;
      using pointer                = T*;
      using const_pointer          = const T*;
      using reference              = T&;
      using const_reference        = const T&;
      using iterator               = pointer;
      using const_iterator         = const_pointer;
      using reverse_iterator       = std::reverse_iterator<iterator>;
      using const_reverse_iterator = std::reverse_iterator<const_iterator>;

      value_type elems[N];

      static STL_LOCAL_CONSTEXPR size_type static_size = N;

      STL_LOCAL_CONSTEXPR_ALGORITHMS iterator begin() { return elems; }
      STL_LOCAL_CONSTEXPR_ALGORITHMS iterator end  () { return elems + N; }

      STL_LOCAL_CONSTEXPR const_iterator begin() const { return elems; }
      STL_LOCAL_CONSTEXPR const_iterator end  () const { return elems + N; }

      STL_LOCAL_CONSTEXPR const_iterator cbegin() const { return elems; }
      STL_LOCAL_CONSTEXPR const_iterator cend  () const { return elems + N; }

      STL_LOCAL_CONSTEXPR_ALGORITHMS reverse_iterator rbegin() { return reverse_iterator(elems + N); }
      STL_LOCAL_CONSTEXPR_ALGORITHMS reverse_iterator rend  () { return reverse_iterator(elems); }

      STL_LOCAL_CONSTEXPR const_reverse_iterator rbegin() const { return const_reverse_iterator(elems + N); }
      STL_LOCAL_CONSTEXPR const_reverse_iterator rend  () const { return const_reverse_iterator(elems); }

      STL_LOCAL_CONSTEXPR const_reverse_iterator crbegin() const { return const_reverse_iterator(elems + N); }
      STL_LOCAL_CONSTEXPR const_reverse_iterator crend  () const { return const_reverse_iterator(elems); }

      STL_LOCAL_CONSTEXPR_ALGORITHMS reference       operator[](const size_type i)       { return elems[i]; }
      STL_LOCAL_CONSTEXPR            const_reference operator[](const size_type i) const { return elems[i]; }

      STL_LOCAL_CONSTEXPR_ALGORITHMS reference       at(const size_type i)       { return elems[i]; }
      STL_LOCAL_CONSTEXPR            const_reference at(const size_type i) const { return elems[i]; }

      STL_LOCAL_CONSTEXPR_ALGORITHMS reference       front()       { return elems[0U]; }
      STL_LOCAL_CONSTEXPR            const_reference front() const { return elems[0U]; }

      STL_LOCAL_CONSTEXPR_ALGORITHMS reference       back()       { return elems[N - 1U]; }
      STL_LOCAL_CONSTEXPR            const_reference back() const { return elems[N - 1U]; }

      static STL_LOCAL_CONSTEXPR size_type size()     { return N; }
      static STL_LOCAL_CONSTEXPR bool empty()         { return false; }
      static STL_LOCAL_CONSTEXPR size_type max_size() { return N; }

      template<typename T2>
      STL_LOCAL_CONSTEXPR_ALGORITHMS void swap(array<T2, N>& y)
      {
        std::swap_ranges(begin(), end(), y.begin());
      }

      STL_LOCAL_CONSTEXPR            const_pointer data() const { return elems; }
      STL_LOCAL_CONSTEXPR_ALGORITHMS pointer       data()       { return elems; }

      pointer c_array() { return elems; }

      template<typename T2>
      STL_LOCAL_CONSTEXPR_ALGORITHMS array& operator=(const array<T2, N>& y)
      {
        std::copy(y.begin(), y.end(), begin());

        return *this;
      }

      STL_LOCAL_CONSTEXPR_ALGORITHMS void assign(const value_type& value)
      {
        std::fill_n(elems, N, value);
      }

      STL_LOCAL_CONSTEXPR_ALGORITHMS void fill(const value_type& value)
      {
        std::fill_n(elems, N, value);
      }
    };

    template<typename T, size_t N>
    STL_LOCAL_CONSTEXPR_ALGORITHMS bool operator==(const array<T, N>& left, const array<T, N>& right)
    {
      return std::equal(left.begin(), left.end(), right.begin());
    }

    template<typename T, size_t N>
    bool operator<(const array<T, N>& left, const array<T, N>& right)
    {
      return std::lexicographical_compare(left.begin(),
                                          left.end(),
                                          right.begin(),
                                          right.end());
    }

    template<typename T, size_t N>
    STL_LOCAL_CONSTEXPR_ALGORITHMS bool operator!=(const array<T, N>& left, const array<T, N>& right)
    {
      return ((left == right) == false);
    }

    template<typename T, size_t N>
    STL_LOCAL_CONSTEXPR_ALGORITHMS bool operator>(const array<T, N>& left, const array<T, N>& right)
    {
      return (right < left);
    }

    template<typename T, size_t N>
    STL_LOCAL_CONSTEXPR_ALGORITHMS bool operator>=(const array<T, N>& left, const array<T, N>& right)
    {
      return ((left < right) == false);
    }

    template<typename T, size_t N>
    STL_LOCAL_CONSTEXPR_ALGORITHMS bool operator<=(const array<T, N>& left, const array<T, N>& right)
    {
      return ((right < left) == false);
    }

    template<typename T, size_t N >
    STL_LOCAL_CONSTEXPR_ALGORITHMS void swap(array<T, N>& x, array<T, N>& y)
    {
      swap_ranges(x.begin(), x.end(), y.begin());
    }

    template<typename T>
    class tuple_size;

    template<typename T, typename std::size_t N>
    class tuple_size<std::array<T, N> > : public std::integral_constant<std::size_t, N>
    {
    };

    template<const std::size_t N, typename T>
    class tuple_element;

    template<const std::size_t I,
             typename T,
             const std::size_t N>
    class tuple_element<I, std::array<T, N> >
    {
      static_assert(I < N, "Sorry, tuple_element index is out of bounds.");

      typedef T type;
    };
  } // namespace std

#endif // ARRAY_2010_02_23_
