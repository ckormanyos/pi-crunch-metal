///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2020.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef MEMORY_2010_02_23_
  #define MEMORY_2010_02_23_

  #include <impl/stl_local_constexpr.h>
  #include <impl/stl_local_noexcept.h>

  #include <cstddef>
  #include <cstdint>

  #if defined(_MSC_VER)
    #define STL_LOCAL_ALIGNAS(n)
  #else
    #define STL_LOCAL_ALIGNAS(n) alignas(n)
  #endif

  // Provide the default placement versions of operator new.
  inline void* operator new  (size_t, void* my_p) STL_LOCAL_NOEXCEPT { return my_p; }
  inline void* operator new[](size_t, void* my_p) STL_LOCAL_NOEXCEPT { return my_p; }

  // Implement the standard allocator (std::allocator).
  namespace std
  {
    class allocator_base
    {
    public:
      typedef std::size_t    size_type;
      typedef std::ptrdiff_t difference_type;

      virtual ~allocator_base();

    protected:
      allocator_base() throw() { }

      allocator_base(const allocator_base&) throw() { }

      // The allocator's default buffer size.
      static STL_LOCAL_CONSTEXPR size_type buffer_size = 64U;

      // The allocator's buffer type.
      struct buffer_type
      {
        std::uint8_t data[buffer_size];
      };

      // The allocator's memory allocation.
      template<const std::uint_fast8_t inner_buffer_alignment>
      static void* do_allocate(const size_type size)
      {
        STL_LOCAL_ALIGNAS(8) static buffer_type buffer;

        static std::uint8_t* get_ptr = buffer.data;

        // Get the newly allocated pointer.
        std::uint8_t* p = get_ptr;

        // Increment the get-pointer for the next allocation.
        // Be sure to handle the inner-buffer alignment.
        const std::uint_fast8_t align_increment  = inner_buffer_alignment - std::uint_fast8_t(size % inner_buffer_alignment);
        const size_type         buffer_increment = size + align_increment;

        get_ptr += buffer_increment;

        // Does this attempted allocation overflow the capacity of the buffer?
        const bool is_overflow = (get_ptr >= (buffer.data + buffer_size));

        if(is_overflow)
        {
          // The buffer has overflowed.

          // Check if the requested size fits in the buffer.
          if(buffer_increment <= buffer_size)
          {
            // The requested size fits in the buffer.

            // Reset the allocated pointer to the bottom of the buffer
            // and increment the next get-pointer.
            p       = buffer.data;
            get_ptr = buffer.data + buffer_increment;
          }
          else
          {
            // The requested size exceeds the capacity of the buffer.

            // Set the return value of the failed allocation to nullptr
            // and reset the get-pointer to its value before the allocation
            // attempt.
            p       = nullptr;
            get_ptr = get_ptr - buffer_increment;
          }
        }

        return static_cast<void*>(p);
      }

    private:
      allocator_base& operator=(const allocator_base&);
    };

    inline allocator_base::~allocator_base() { }

    // Global comparison operators (required by the standard).
    inline bool operator==(const allocator_base&,
                           const allocator_base&) throw()
    {
      return true;
    }

    inline bool operator!=(const allocator_base&,
                           const allocator_base&) throw()
    {
      return false;
    }

    template<typename T,
             const std::uint_fast8_t inner_buffer_alignment = UINT8_C(4)>
    class allocator;

    template<const std::uint_fast8_t inner_buffer_alignment>
    class allocator<void, inner_buffer_alignment> : public allocator_base
    {
    public:
      typedef void              value_type;
      typedef value_type*       pointer;
      typedef const value_type* const_pointer;

      template<typename U>
      struct rebind { typedef allocator<U, inner_buffer_alignment> other; };
    };

    template<typename T,
             const std::uint_fast8_t inner_buffer_alignment>
    class allocator : public allocator_base
    {
    public:
      static_assert(sizeof(T) <= buffer_size,
                    "The size of the allocation object can not exceed the buffer size.");

      static_assert(inner_buffer_alignment <= buffer_size,
                    "The granularity of the inner-buffer alignment can not exceed the buffer size.");

      typedef T                 value_type;
      typedef value_type*       pointer;
      typedef const value_type* const_pointer;
      typedef value_type&       reference;
      typedef const value_type& const_reference;

      allocator() throw() { }

      allocator(const allocator&) throw() : allocator_base(allocator()) { }

      template <typename U>
      allocator(const allocator<U, inner_buffer_alignment>&) throw() { }

      template<typename U> 
      struct rebind { typedef allocator<U, inner_buffer_alignment> other; };

      size_type max_size() const throw()
      {
        return buffer_size / sizeof(value_type);
      }

            pointer address(      reference x) const { return &x; }
      const_pointer address(const_reference x) const { return &x; }

      pointer allocate(size_type count,
                       typename allocator<void, inner_buffer_alignment>::const_pointer = nullptr)
      {
        const size_type chunk_size = count * sizeof(value_type);

        void* p = do_allocate<inner_buffer_alignment>(chunk_size);

        return static_cast<pointer>(p);
      }

      void construct(pointer p, const value_type& x)
      {
        new(static_cast<void*>(p)) value_type(x);
      }

      void destroy(pointer p) { p->~value_type(); }

      void deallocate(pointer, size_type) { }
    };

    namespace detail
    {
      template<class T>
      struct addr_impl_ref
      {
        T& my_v;

        inline addr_impl_ref(T& v): my_v(v) { }

        inline operator T& () const
        {
          return my_v;
        }

      private:
        addr_impl_ref& operator=(const addr_impl_ref&);
      };

      template<class T>
      struct addressof_impl
      {
        static inline T* f(T& v, long)
        {
          return reinterpret_cast<T*>(&const_cast<char&>(reinterpret_cast<const volatile char &>(v)));
        }

        static inline T* f(T* v, int)
        {
          return v;
        }
      };
    }

    template<typename T>
    T* addressof(T& v)
    {
      return detail::addressof_impl<T>::f(detail::addr_impl_ref<T>(v), 0);
    }
  }

#endif // MEMORY_2010_02_23_
